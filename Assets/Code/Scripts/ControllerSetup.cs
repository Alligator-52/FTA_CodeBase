//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Code/Scripts/ControllerSetup.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerSetup: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerSetup()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControllerSetup"",
    ""maps"": [
        {
            ""name"": ""Hoist"",
            ""id"": ""e97d2f46-8f73-48c7-bfc2-50388d50f353"",
            ""actions"": [
                {
                    ""name"": ""Cross"",
                    ""type"": ""Value"",
                    ""id"": ""256ec4a3-3938-4418-a23a-43b1f1f58cb1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Value"",
                    ""id"": ""8b925241-c573-442b-b69d-e221b6e58a05"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Switcher"",
                    ""type"": ""Button"",
                    ""id"": ""bc6665a7-284b-4e3f-8d93-dd100f04aa4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Malfunction"",
                    ""type"": ""Button"",
                    ""id"": ""00a588de-71fa-4ac8-b21e-812f2df90d79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""7f5e7415-a909-41f7-8acc-9938a83b89b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd4c673a-30bb-44a3-be10-082bcbd593ac"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cross"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f05b7f8-126b-4339-98ef-26fa5e9c5b6b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c06a7e6a-cafb-436c-9924-9d2a4eeec15a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switcher"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f16fb53c-4f95-4cbe-8005-96f31beba7e2"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Malfunction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d7202ac-2648-4abe-8dbc-90694b54fdf3"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hoist
        m_Hoist = asset.FindActionMap("Hoist", throwIfNotFound: true);
        m_Hoist_Cross = m_Hoist.FindAction("Cross", throwIfNotFound: true);
        m_Hoist_Vertical = m_Hoist.FindAction("Vertical", throwIfNotFound: true);
        m_Hoist_Switcher = m_Hoist.FindAction("Switcher", throwIfNotFound: true);
        m_Hoist_Malfunction = m_Hoist.FindAction("Malfunction", throwIfNotFound: true);
        m_Hoist_Reset = m_Hoist.FindAction("Reset", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hoist
    private readonly InputActionMap m_Hoist;
    private List<IHoistActions> m_HoistActionsCallbackInterfaces = new List<IHoistActions>();
    private readonly InputAction m_Hoist_Cross;
    private readonly InputAction m_Hoist_Vertical;
    private readonly InputAction m_Hoist_Switcher;
    private readonly InputAction m_Hoist_Malfunction;
    private readonly InputAction m_Hoist_Reset;
    public struct HoistActions
    {
        private @ControllerSetup m_Wrapper;
        public HoistActions(@ControllerSetup wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cross => m_Wrapper.m_Hoist_Cross;
        public InputAction @Vertical => m_Wrapper.m_Hoist_Vertical;
        public InputAction @Switcher => m_Wrapper.m_Hoist_Switcher;
        public InputAction @Malfunction => m_Wrapper.m_Hoist_Malfunction;
        public InputAction @Reset => m_Wrapper.m_Hoist_Reset;
        public InputActionMap Get() { return m_Wrapper.m_Hoist; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HoistActions set) { return set.Get(); }
        public void AddCallbacks(IHoistActions instance)
        {
            if (instance == null || m_Wrapper.m_HoistActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HoistActionsCallbackInterfaces.Add(instance);
            @Cross.started += instance.OnCross;
            @Cross.performed += instance.OnCross;
            @Cross.canceled += instance.OnCross;
            @Vertical.started += instance.OnVertical;
            @Vertical.performed += instance.OnVertical;
            @Vertical.canceled += instance.OnVertical;
            @Switcher.started += instance.OnSwitcher;
            @Switcher.performed += instance.OnSwitcher;
            @Switcher.canceled += instance.OnSwitcher;
            @Malfunction.started += instance.OnMalfunction;
            @Malfunction.performed += instance.OnMalfunction;
            @Malfunction.canceled += instance.OnMalfunction;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
        }

        private void UnregisterCallbacks(IHoistActions instance)
        {
            @Cross.started -= instance.OnCross;
            @Cross.performed -= instance.OnCross;
            @Cross.canceled -= instance.OnCross;
            @Vertical.started -= instance.OnVertical;
            @Vertical.performed -= instance.OnVertical;
            @Vertical.canceled -= instance.OnVertical;
            @Switcher.started -= instance.OnSwitcher;
            @Switcher.performed -= instance.OnSwitcher;
            @Switcher.canceled -= instance.OnSwitcher;
            @Malfunction.started -= instance.OnMalfunction;
            @Malfunction.performed -= instance.OnMalfunction;
            @Malfunction.canceled -= instance.OnMalfunction;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
        }

        public void RemoveCallbacks(IHoistActions instance)
        {
            if (m_Wrapper.m_HoistActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHoistActions instance)
        {
            foreach (var item in m_Wrapper.m_HoistActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HoistActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HoistActions @Hoist => new HoistActions(this);
    public interface IHoistActions
    {
        void OnCross(InputAction.CallbackContext context);
        void OnVertical(InputAction.CallbackContext context);
        void OnSwitcher(InputAction.CallbackContext context);
        void OnMalfunction(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
}
